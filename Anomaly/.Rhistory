}
runUnivariateChecks(con)
runUnivariateChecksOnFile <- function(con, checksDf, filePath) {
logInfo(paste("Processing file", filePath))
return (0)
}
runUnivariateChecksOnStudyFolder <- function(con, checksDf, studyFolderDf) {
path <- studyFolderDf[1, 2]
logInfo(paste("Processing folder", path))
# Fetch paths of all SAS data files
sasFiles <- getAllSasFilePaths(path)
# Process each SAS data file
for (dataFile in sasFiles) {
runUnivariateChecksOnFile(con, checksDf, dataFile)
}
return (0)
}
runUnivariateChecksOnStudy <- function(con, checksDf, studyDf) {
# Run all univariate checks on a study
#
# Args:
#     con : Database connection
#     checksDf : Data frame containing checks to run
#     studyDf : Data frame containing study to run
studyName <- studyDf[1, 2]
logInfo(paste("Processing study", studyName))
# Fetch study folders
studyId <- studyDf[1, 1]
studyFoldersDf <- fetchAllStudyFolders(con, studyId)
numFolders <- nrow(studyFoldersDf)
if (numFolders == 0) {
logWarning("No data folders")
return (0)
}
# Process each study folder
for (i in 1:numFolders) {
runUnivariateChecksOnStudyFolder(con, checksDf, studyFoldersDf[i,])
}
return (0)
}
runUnivariateChecks(con)
dbDisconnect(con)
grepl("[1-9]+", "10JAN2015")
grepl("[1-9]+JAN", "10JAN2015")
grepl("[0-9]+JAN", "10JAN2015")
grepl("[0-9]+JAN[0-9]{4}", "10JAN2015")
grepl("[0-9]+JAN[0-9]{4}", "10JAN15")
grepl("[0-9]+JAN[0-9]{4}", "10JAN2015")
grepl("[0-9]+JAN[0-9]{4}", "10jan2015")
?grepl
grepl("[0-9]+JAN[0-9]{4}", "10jan2015", ignore.case = TRUE)
grepl("[0-9]+JAN[0-9]{4}", "10feb2015", ignore.case = TRUE)
grepl("[0-9]+(JAN)[0-9]{4}", "10feb2015", ignore.case = TRUE)
grepl("[0-9]+(JAN)[0-9]{4}", "10jan2015", ignore.case = TRUE)
grepl("[0-9]+(JAN|FEB)[0-9]{4}", "10jan2015", ignore.case = TRUE)
grepl("[0-9]+(JAN|FEB)[0-9]{4}", "10feb2015", ignore.case = TRUE)
grepl("[0-9]+(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|NOV|DEC)[0-9]{4}", "10feb2015", ignore.case = TRUE)
grepl("[0-9]+(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|NOV|DEC)[0-9]{4}", "10aug2015", ignore.case = TRUE)
as.Date("10AUG2015", "%d%b%Y")
getDate <- function(x) {
dt <- NULL
if (grepl("[1-9]+JAN[1-9]{4}", x)) {
dt <- as.Date(x, "%d%b%Y")
}
return (dt)
}
getDate("15JAN2017")
getDate <- function(x) {
dt <- NULL
if (grepl("[0-9]+(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|NOV|DEC)[0-9]{4}", x)) {
dt <- as.Date(x, "%d%b%Y")
}
return (dt)
}
getDate("15JAN2017")
path <- "S:/RhoFED/ICAC2/PROSE/Statistics/Data/Complete/pdr.sas7bdat";
data = read.sas7bdat(path)
library(sas7bdat)
data = read.sas7bdat(path)
colnames(data)
head(data$PDR_q7a1c)
infile <- "C:/RhoVer/Working/test-in.csv"
df <- read.csv(infile)
infile <- "C:/RhoVer/Working/test-in.csv"
fieldname <- "VSGP_q5-358"
threshold <- 2
df <- read.csv(infile)
field <- df[,fieldname]
field <- df[,c(fieldname)]
field <- df[,fieldname]
fieldnum <- 3
field <- df[,fieldnum]
length(field)
fieldMean <- mean(field, na.rm = TRUE)
?mean
head(field)
mean(field)
field <- as.numeric(df[,fieldnum])
fieldMean <- mean(field, na.rm = TRUE)
fieldSd <- sd(field, na.rm = TRUE)
deltas <- abs(field - fieldMean)
deltas
sdCutoff <- 2
cutoff <- fieldSd * sdCutoff
outliers <- deltas > cutoff
outliers
outfile <- "C:/RhoVer/Working/test-out.csv"
?write.csv
write.csv(outliers, file = outfile)
paramfile <- "C:/RhoVer/Working/test-param.csv"
params <- data.frame(mean = c(fieldMean), sd = c(fieldSd))
write.csv(params, paramfile)
df <- read.csv(infile)
field <- as.numeric(df[,fieldnum])
fieldMean <- mean(field, na.rm = TRUE)
deltas <- abs(field - fieldMean)
fieldSd <- sd(field, na.rm = TRUE)
cutoff <- fieldSd * sdCutoff
df$outliers <- deltas > cutoff
write.csv(df, file = outfile)
params <- data.frame(mean = c(fieldMean), sd = c(fieldSd))
write.csv(params, paramfile)
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
fieldnum <- 3
sdCutoff <- 2
df <- read.csv(infile)
field <- as.numeric(df[,fieldnum])
fieldMean <- mean(field, na.rm = TRUE)
deltas <- abs(field - fieldMean)
fieldSd <- sd(field, na.rm = TRUE)
cutoff <- fieldSd * sdCutoff
df$outliers <- deltas > cutoff
write.csv(df, file = outfile)
params <- data.frame(mean = c(fieldMean), sd = c(fieldSd))
write.csv(params, paramfile)
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
fieldnum <- 3
sdCutoff <- 2
df <- read.csv(infile)
field <- as.numeric(df[,fieldnum])
fieldMean <- mean(field, na.rm = TRUE)
deltas <- abs(field - fieldMean)
fieldSd <- sd(field, na.rm = TRUE)
cutoff <- fieldSd * sdCutoff
df$outliers <- deltas > cutoff
write.csv(df, file = outfile, row.names = FALSE)
params <- data.frame(mean = c(fieldMean), sd = c(fieldSd))
write.csv(params, paramfile)
# args <- commandArgs(trailingOnly=TRUE)
# infile <- args[1]
# outfile <- args[2]
# paramfile <- args[3]
# fieldnum <- as.integer(args[4])
# sdCutoff <- as.numeric(args[5])
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
fieldnum <- 3
sdCutoff <- 2
df <- read.csv(infile)
field <- as.numeric(df[,fieldnum])
fieldMean <- mean(field, na.rm = TRUE)
deltas <- abs(field - fieldMean)
fieldSd <- sd(field, na.rm = TRUE)
cutoff <- fieldSd * sdCutoff
df$outliers <- deltas > cutoff
write.csv(df, file = outfile, row.names = FALSE)
params <- data.frame(mean = c(fieldMean), sd = c(fieldSd))
write.csv(params, paramfile, row.names = FALSE)
library(sas7bdat)
file1 <- "S:/RhoFED/CTOT-SACCC/CTOT/CTOT-08-Abecassis/Stats/Data/Clinical/vitlmstr.sas7bdat"
file2 <- "S:/RhoFED/CTOT-SACCC/CTOT/CTOT-08-Abecassis/Stats/Data/Clinical/chemmstr.sas7bdat"
mergeCol <- "ID"
df1 <- read.sas7bdat(file1)
df2 <- read.sas7bdat(file2)
df3 <- merge(df1, df2, by=mergeCol)
cor(df3)
?cor
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
firstDataCol <- 4
classes <- character()
for (i in 1:(firstDataCol - 1)) {
classes <- c(classes, "character")
}
classes <- c(classes, "numeric")
df <- read.csv(infile, colClasses = classes)
X <- df[:firstDataCol]
X <- df[: firstDataCol]
X <- df[:, firstDataCol]
X <- df[, firstDataCol]
Y <- df[, firstDataCol - 1]
Y <- df[, firstDataCol + 1]
fit.y <- lm(Y ~ X, data = df)
areHet <- ncvTest(fit.y)$p <= .05
library(car)
areHet <- ncvTest(fit.y)$p <= .05
fit.y <- lm(Y ~ X)
areHet <- ncvTest(fit.y)$p <= .05
fitY <- lm(Y ~ X)
areHet <- ncvTest(fitY)$p <= .05
# Compute residuals
# Case 1: Data heteroschedastic
if (areHet) {
fitBct <- BoxCoxTrans(Y)
Y2 <- predict(fitBct, Y)
fitY2 = lm(Y2 ~ X)
res <- abs(residuals(fitY2))
}
# Case 2: Data not heteroschedastic
else {
res <- abs(residuals(fitY))
}
library(caret)
if (areHet) {
fitBct <- BoxCoxTrans(Y)
Y2 <- predict(fitBct, Y)
fitY2 = lm(Y2 ~ X)
res <- abs(residuals(fitY2))
}
# Case 2: Data not heteroschedastic
else {
res <- abs(residuals(fitY))
}
str(Y)
Y
library(car)
library(caret)
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
firstDataCol <- 4
classes <- character()
for (i in 1:(firstDataCol - 1)) {
classes <- c(classes, "character")
}
classes <- c(classes, "numeric")
classes <- c(classes, "numeric")
df <- read.csv(infile, colClasses = classes)
X <- df[, firstDataCol]
Y <- df[, firstDataCol + 1]
fitY <- lm(Y ~ X)
areHet <- ncvTest(fitY)$p <= .05
if (areHet) {
fitBct <- BoxCoxTrans(Y)
Y2 <- predict(fitBct, Y)
fitY2 = lm(Y2 ~ X)
res <- abs(residuals(fitY2))
}
# Case 2: Data not heteroschedastic
else {
res <- abs(residuals(fitY))
}
if (areHet) {
fitBct <- BoxCoxTrans(Y)
Y2 <- predict(fitBct, Y)
fitY2 = lm(Y2 ~ X)
res <- abs(residuals(fitY2))
} else {
res <- abs(residuals(fitY))
}
sdResidual <- 2
cutoffRes <- mean(res) + sdResidual * sd(res)
outlierIndex <- res > cutoffRes
k <- 5
numNearestNeighbors <- 5
distMatrix <- nndist(X, Y, k=1:numNearestNeighbors)
library(spatstat)
distMatrix <- nndist(X, Y, k=1:numNearestNeighbors)
meanDistances <- rowMeans(distMatrix)
sdDensity <- 6
cutoffDensity <- mean(meanDistances) + sdDensity * sd(meanDistances)
outlierIndex <- outlierIndex & meanDistances > cutoffDensity
df$Is_Outlier <- outlierIndex
write.csv(df, file = outfile, row.names = FALSE, quote = FALSE)
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
firstDataCol <- 4
sdResidual <- 2
numNearestNeighbors <- 5
sdDensity <- 6
classes <- character()
for (i in 1:(firstDataCol - 1)) {
classes <- c(classes, "character")
}
classes <- c(classes, "numeric")
classes <- c(classes, "numeric")
# Read in input
df <- read.csv(infile, colClasses = classes)
df <- read.csv(infile, colClasses = classes)
X <- df[, firstDataCol]
Y <- df[, firstDataCol + 1]
fitY <- lm(Y ~ X)
# Test if data are heteroschedastic
areHet <- ncvTest(fitY)$p <= .05
# Compute residuals
if (areHet) {
fitBct <- BoxCoxTrans(Y)
Y2 <- predict(fitBct, Y)
fitY2 = lm(Y2 ~ X)
res <- abs(residuals(fitY2))
} else {
res <- abs(residuals(fitY))
}
# Compute residual cutoff value
cutoffRes <- mean(res) + sdResidual * sd(res)
# Make initual outlier calls based on residual cutoff
outlierIndex <- res > cutoffRes
# Compute mean distances to K nearest neighbors
distMatrix <- nndist(X, Y, k=1:numNearestNeighbors)
meanDistances <- rowMeans(distMatrix)
# Compute density cutoff value
cutoffDensity <- mean(meanDistances) + sdDensity * sd(meanDistances)
# Refine outlier calls by applying density cutoff
outlierIndex <- outlierIndex & meanDistances > cutoffDensity
# Write outlier output file
df$Is_Outlier <- outlierIndex
write.csv(df, file = outfile, row.names = FALSE, quote = FALSE)
propNames = character()
propValues = character()
if (areHet) {
propNames <- c(propNames, "heteroschedastic")
propValues <- c(propValues, "true")
}
?as.character
fitY$coefficients
propNames <- character()
propValues <- character()
# Heteroschedasticity
propNames <- c(propNames, "heteroschedastic")
propValues <- c(propValues, "false")
# Regression line slope
propNames <- c(propNames, "slope")
propValues <- c(propValues, toString(fitY$coefficients[2]))
# Regression line intercept
propNames <- c(propNames, "intercept")
propValues <- c(propValues, toString(fitY$coefficients[1]))
propDf = data.frame(name=propNames, value=propValues)
write.csv(propDf, file = paramFile, row.names = FALSE, quote = FALSE)
write.csv(propDf, file = paramfile, row.names = FALSE, quote = FALSE)
library(car)
library(caret)
library(spatstat)
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
firstDataCol <- 4
sdResidual <- 2
numNearestNeighbors <- 5
sdDensity <- 6
# Configure input data formats.  All columns to the left
# of the first one being checked will be considered ID fields
# and treated as CHARACTER.  Columns being checked will be
# treated as NUMERIC.
classes <- character()
for (i in 1:(firstDataCol - 1)) {
classes <- c(classes, "character")
}
classes <- c(classes, "numeric")
classes <- c(classes, "numeric")
# Read in input
df <- read.csv(infile, colClasses = classes)
# Fit a linear model
X <- df[, firstDataCol]
Y <- df[, firstDataCol + 1]
fitY <- lm(Y ~ X)
# Test if data are heteroschedastic
areHet <- ncvTest(fitY)$p <= .05
# Compute residuals
if (areHet) {
fitBct <- BoxCoxTrans(Y)
Y2 <- predict(fitBct, Y)
fitY2 = lm(Y2 ~ X)
res <- abs(residuals(fitY2))
} else {
res <- abs(residuals(fitY))
}
# Compute residual cutoff value
cutoffRes <- mean(res) + sdResidual * sd(res)
# Make initual outlier calls based on residual cutoff
outlierIndex <- res > cutoffRes
# Compute mean distances to K nearest neighbors
distMatrix <- nndist(X, Y, k=1:numNearestNeighbors)
meanDistances <- rowMeans(distMatrix)
# Compute density cutoff value
cutoffDensity <- mean(meanDistances) + sdDensity * sd(meanDistances)
# Refine outlier calls by applying density cutoff
outlierIndex <- outlierIndex & meanDistances > cutoffDensity
# Write outlier output file
df$Is_Outlier <- outlierIndex
write.csv(df, file = outfile, row.names = FALSE, quote = FALSE)
statProps <- data.frame()
statProps$heteroschedastic = c("false")
statProps$heteroschedastic <- c("false")
?data.frame
statProps <- data.frame(heteroschedastic <- c("false"))
stapProps$slope <- c(fitY$coefficients[2])
statProps$slope <- c(fitY$coefficients[2])
statProps$intercept <- fitY$coefficients[1]
write.csv(statProps, file = paramfile, row.names = FALSE, quote = FALSE)
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
firstDataCol <- 4
sdResidual <- 2
numNearestNeighbors <- 5
sdDensity <- 6
# Configure input data formats.  All columns to the left
# of the first one being checked will be considered ID fields
# and treated as CHARACTER.  Columns being checked will be
# treated as NUMERIC.
classes <- character()
for (i in 1:(firstDataCol - 1)) {
classes <- c(classes, "character")
}
classes <- c(classes, "numeric")
classes <- c(classes, "numeric")
# Read in input
df <- read.csv(infile, colClasses = classes)
# Fit a linear model
X <- df[, firstDataCol]
Y <- df[, firstDataCol + 1]
fitY <- lm(Y ~ X)
# Test if data are heteroschedastic
areHet <- ncvTest(fitY)$p <= .05
# Compute residuals
if (areHet) {
fitBct <- BoxCoxTrans(Y)
Y2 <- predict(fitBct, Y)
fitY2 = lm(Y2 ~ X)
res <- abs(residuals(fitY2))
} else {
res <- abs(residuals(fitY))
}
# Compute residual cutoff value
cutoffRes <- mean(res) + sdResidual * sd(res)
# Make initual outlier calls based on residual cutoff
outlierIndex <- res > cutoffRes
# Compute mean distances to K nearest neighbors
distMatrix <- nndist(X, Y, k=1:numNearestNeighbors)
meanDistances <- rowMeans(distMatrix)
# Compute density cutoff value
cutoffDensity <- mean(meanDistances) + sdDensity * sd(meanDistances)
# Refine outlier calls by applying density cutoff
outlierIndex <- outlierIndex & meanDistances > cutoffDensity
# Write outlier output file
df$Is_Outlier <- outlierIndex
write.csv(df, file = outfile, row.names = FALSE, quote = FALSE)
statProps <- data.frame(heteroschedastic = c("false"))
statProps$slope <- c(fitY$coefficients[2])
statProps$intercept <- fitY$coefficients[1]
statProps$cutoff-residual <- cutoffRes
statProps$cutoff_residual <- cutoffRes
write.csv(statProps, file = paramfile, row.names = FALSE, quote = FALSE)
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
firstDataCol <- 4
sdResidual <- 2
numNearestNeighbors <- 5
sdDensity <- 6
classes <- character()
for (i in 1:(firstDataCol - 1)) {
classes <- c(classes, "character")
}
classes <- c(classes, "numeric")
classes <- c(classes, "numeric")
# Read in input
df <- read.csv(infile, colClasses = classes)
X <- df[, firstDataCol]
Y <- df[, firstDataCol + 1]
fitY <- lm(Y ~ X)
# If data are heteroschedastic, perform Box-Cox transform
areHet <- ncvTest(fitY)$p <= .05
#areHet <- FALSE
lambda <- NaN
if (areHet) {
fitBct <- BoxCoxTrans(Y)
Y2 <- predict(fitBct, Y)
fitY = lm(Y2 ~ X)
lambda <- fitBct$lambda
}
res <- abs(residuals(fitY))
meanRes <- mean(res)
cutoffRes <- meanRes + sdResidual * sd(res)
outlierIndex <- res > cutoffRes
# Compute mean distances to K nearest neighbors
distMatrix <- nndist(X, Y, k=1:numNearestNeighbors)
meanDistances <- rowMeans(distMatrix)
# Compute density cutoff value
cutoffDensity <- mean(meanDistances) + sdDensity * sd(meanDistances)
# Refine outlier calls by applying density cutoff
outlierIndex <- outlierIndex & meanDistances > cutoffDensity
# Write outlier output file
df$Is_Outlier <- outlierIndex
write.csv(df, file = outfile, row.names = FALSE, quote = FALSE)
# Generate output for statistical properties file
statProps <- data.frame(heteroschedastic = c(areHet))
statProps$slope <- fitY$coefficients[2]
statProps$intercept <- fitY$coefficients[1]
statProps$cutoff_residual <- cutoffRes
statProps$mean_res <- meanRes
if (!is.nan(lambda)) {
statProps$lambda <- lambda
}
write.csv(statProps, file = paramfile, row.names = FALSE, quote = FALSE)
