initializeLogging(con, dataCheckerRunId)
logInfo("Logging system initialized")
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
name <- messageTypeNames["I", 2]
fullMessage <- paste(messageTypeNames[messageType, 2], ": ", message, sep="");
message(fullMessage);
}
logInfo("Logging system initialized")
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
name <- messageTypeNames["I", 2]
fullMessage <- paste(name, ": ", message, sep="");
message(fullMessage);
}
logInfo("Logging system initialized")
A
A[a, 1]
A["a", 1]
A
A[a,]
A["a",]
str(A)
rownames(A)
messageTypeNames <- data.frame(Code = c("F", "E", "W", "I"), Name = c("FATAL", "ERROR", "WARNING", "INFO"))
A
A$c2
A[a,]
A[1,]
A[1,1]
str(A)
A$c2
A["a",]
messageTypeNames <- data.frame(Code = c("F", "E", "W", "I"), Name = c("FATAL", "ERROR", "WARNING", "INFO"),
row.names = "Code")
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
name <- messageTypeNames["I", 1]
fullMessage <- paste(name, ": ", message, sep="");
message(fullMessage);
}
logInfo("Logging system initialized")
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
name <- messageTypeNames[messageType, 1]
fullMessage <- paste(name, ": ", message, sep="");
message(fullMessage);
}
logInfo("Logging system initialized")
logWarning("Logging system initialized")
insertLogMessage <- function(con, messageType, message, dataCheckerRunId) {
sql <- paste(
"insert into data_checker_message(message_type, message, data_checker_run_id) ",
"values('", messageType, "', '", message, "', ", dataCheckerRunId, ")",
sep = ""
)
dbSendQuery(sql)
}
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
name <- messageTypeNames[messageType, 1]
fullMessage <- paste(name, ": ", message, sep="");
message(fullMessage);
insertLogMessage(l_con, messageType, message, l_dataCheckerRunId)
}
logInfo("Logging system initialized")
insertLogMessage <- function(con, messageType, message, dataCheckerRunId) {
sql <- paste(
"insert into data_checker_message(message_type, message, data_checker_run_id) ",
"values('", messageType, "', '", message, "', ", dataCheckerRunId, ")",
sep = ""
)
dbSendQuery(con, sql)
}
logInfo("Logging system initialized")
insertLogMessage <- function(con, messageType, message, dataCheckerRunId) {
sql <- paste(
"insert into data_checker_message(message_type, message, data_checker_run_id) ",
"values('", messageType, "', '", message, "', ", dataCheckerRunId, ")",
sep = ""
)
message(sql)
dbSendQuery(con, sql)
}
logInfo("Logging system initialized")
initializeLogging(con, dataCheckerRunId)
logInfo("Logging system initialized")
dataCheckerRunId
l_dataCheckerRunId
initializeLogging <- function(con, dataCheckerRunId) {
# Initialize logging system
#
# Args:
#    con : Database connection
#    dataCheckerRunId: ID of data checker run
l_con <- con
l_dataCheckerRunId <- dataCheckerRunId
message(l_dataCheckerRunId)
}
initializeLogging(con, dataCheckerRunId)
l_dataCheckerRunId
l_dataCheckerRunId <- -1
initializeLogging(con, dataCheckerRunId)
?assign
initializeLogging <- function(con, dataCheckerRunId) {
# Initialize logging system
#
# Args:
#    con : Database connection
#    dataCheckerRunId: ID of data checker run
assign(l_con, con)
assign(l_dataCheckerRunId, dataCheckerRunId)
}
initializeLogging(con, dataCheckerRunId)
initializeLogging <- function(con, dataCheckerRunId) {
# Initialize logging system
#
# Args:
#    con : Database connection
#    dataCheckerRunId: ID of data checker run
assign("l_con", con)
assign("l_dataCheckerRunId", dataCheckerRunId)
}
initializeLogging(con, dataCheckerRunId)
logInfo("Logging system initialized")
l_dataCheckerRunId
l_con <<- NULL
l_dataCheckerRunId <<- -1
initializeLogging <- function(con, dataCheckerRunId) {
# Initialize logging system
#
# Args:
#    con : Database connection
#    dataCheckerRunId: ID of data checker run
l_con <<- con
l_dataCheckerRunId <<- dataCheckerRunId
}
initializeLogging(con, dataCheckerRunId)
l_dataCheckerRunId
logInfo("Logging system initialized")
insertLogMessage <- function(con, messageType, message, dataCheckerRunId) {
sql <- paste(
"insert into data_checker_message(message_type, message, data_checker_run_id) ",
"values('", messageType, "', '", message, "', ", dataCheckerRunId, ")",
sep = ""
)
dbSendQuery(con, sql)
}
dbResult <- logInfo("Logging system initialized")
insertLogMessage <- function(con, messageType, message, dataCheckerRunId) {
# Insert a log message into the database
#
# Args:
#     con : Database connection
#     messageType: Message type code.  See rhover_logger.R for allowed values.
#     message : Message to log
#     dataCheckerRunId : ID of data checker run
sql <- paste(
"insert into data_checker_message(message_type, message, data_checker_run_id) ",
"values('", messageType, "', '", message, "', ", dataCheckerRunId, ")",
sep = ""
)
return (dbSendQuery(con, sql))
}
dbResult <- logInfo("Logging system initialized")
dataCheckerRunId <- loadDataCheckerRun(con)
initializeLogging(con, dataCheckerRunId)
dbResult <- logInfo("Logging system initialized")
runUnivariateChecks(con)
runUnivariateChecks(con)
runUnivariateChecksOnStudy <- function(con, checksDf, studyDf) {
# Run all univariate checks on a study
#
# Args:
#     con : Database connection
#     checksDf : Data frame containing checks to run
#     studyDf : Data frame containing study to run
studyName <- studyDf[1, 2]
message("Processing study ", studyName)
# Fetch study folders
studyId <- studyDf[1, 1]
studyFoldersDf <- fetchAllStudyFolders(con, studyId)
numFolders <- nrow(studyFoldersDf)
if (numFolders == 0) {
logWarning("No data folders")
return (0)
}
# Process each study folder
for (i in 1:numFolders) {
runUnivariateChecksOnStudyFolder(con, checksDf, studyFoldersDf[i,])
}
return (0)
}
runUnivariateChecks <- function(con) {
# Runs all univatate checks against all studies
#
# Args:
#     con : Database connection
# Fetch univariate data checks
checksDf <- fetchAllUnivariateDataChecks(con)
if (nrow(checks) == 0) {
logWarning("No univariate checks defined")
return (0)
}
# Fetch studies
studiesDf <- fetchAllStudies(con)
numStudies <- nrow(studiesDf)
if (numStudies == 0) {
logWarning("No studies")
return (0)
}
# Process each study
for (i in 1:numStudies) {
runUnivariateChecksOnStudy(con, checksDf, studyDf[i,])
}
return (0)
}
runUnivariateChecks(con)
runUnivariateChecks(con)
runUnivariateChecks <- function(con) {
# Runs all univatate checks against all studies
#
# Args:
#     con : Database connection
# Fetch univariate data checks
checksDf <- fetchAllUnivariateDataChecks(con)
if (nrow(checks) == 0) {
logWarning("No univariate checks defined")
return (0)
}
# Fetch studies
studiesDf <- fetchAllStudies(con)
numStudies <- nrow(studiesDf)
if (numStudies == 0) {
logWarning("No studies")
return (0)
}
# Process each study
for (i in 1:numStudies) {
runUnivariateChecksOnStudy(con, checksDf, studiesDf[i,])
}
return (0)
}
runUnivariateChecks(con)
runUnivariateChecksOnStudy <- function(con, checksDf, studyDf) {
# Run all univariate checks on a study
#
# Args:
#     con : Database connection
#     checksDf : Data frame containing checks to run
#     studyDf : Data frame containing study to run
studyName <- studyDf[1, 2]
logInfo("Processing study ", studyName)
# Fetch study folders
studyId <- studyDf[1, 1]
studyFoldersDf <- fetchAllStudyFolders(con, studyId)
numFolders <- nrow(studyFoldersDf)
if (numFolders == 0) {
logWarning("No data folders")
return (0)
}
# Process each study folder
for (i in 1:numFolders) {
runUnivariateChecksOnStudyFolder(con, checksDf, studyFoldersDf[i,])
}
return (0)
}
runUnivariateChecks(con)
runUnivariateChecksOnStudy <- function(con, checksDf, studyDf) {
# Run all univariate checks on a study
#
# Args:
#     con : Database connection
#     checksDf : Data frame containing checks to run
#     studyDf : Data frame containing study to run
studyName <- studyDf[1, 2]
logInfo(paste("Processing study", studyName))
# Fetch study folders
studyId <- studyDf[1, 1]
studyFoldersDf <- fetchAllStudyFolders(con, studyId)
numFolders <- nrow(studyFoldersDf)
if (numFolders == 0) {
logWarning("No data folders")
return (0)
}
# Process each study folder
for (i in 1:numFolders) {
runUnivariateChecksOnStudyFolder(con, checksDf, studyFoldersDf[i,])
}
return (0)
}
runUnivariateChecks(con)
runUnivariateChecksOnFile <- function(con, checksDf, filePath) {
logInfo(paste("Processing file", filePath))
return (0)
}
runUnivariateChecksOnStudyFolder <- function(con, checksDf, studyFolderDf) {
path <- studyFolderDf[1, 2]
logInfo(paste("Processing folder", path))
# Fetch paths of all SAS data files
sasFiles <- getAllSasFilePaths(path)
# Process each SAS data file
for (dataFile in sasFiles) {
runUnivariateChecksOnFile(con, checksDf, dataFile)
}
return (0)
}
runUnivariateChecksOnStudy <- function(con, checksDf, studyDf) {
# Run all univariate checks on a study
#
# Args:
#     con : Database connection
#     checksDf : Data frame containing checks to run
#     studyDf : Data frame containing study to run
studyName <- studyDf[1, 2]
logInfo(paste("Processing study", studyName))
# Fetch study folders
studyId <- studyDf[1, 1]
studyFoldersDf <- fetchAllStudyFolders(con, studyId)
numFolders <- nrow(studyFoldersDf)
if (numFolders == 0) {
logWarning("No data folders")
return (0)
}
# Process each study folder
for (i in 1:numFolders) {
runUnivariateChecksOnStudyFolder(con, checksDf, studyFoldersDf[i,])
}
return (0)
}
runUnivariateChecks(con)
dbDisconnect(con)
grepl("[1-9]+", "10JAN2015")
grepl("[1-9]+JAN", "10JAN2015")
grepl("[0-9]+JAN", "10JAN2015")
grepl("[0-9]+JAN[0-9]{4}", "10JAN2015")
grepl("[0-9]+JAN[0-9]{4}", "10JAN15")
grepl("[0-9]+JAN[0-9]{4}", "10JAN2015")
grepl("[0-9]+JAN[0-9]{4}", "10jan2015")
?grepl
grepl("[0-9]+JAN[0-9]{4}", "10jan2015", ignore.case = TRUE)
grepl("[0-9]+JAN[0-9]{4}", "10feb2015", ignore.case = TRUE)
grepl("[0-9]+(JAN)[0-9]{4}", "10feb2015", ignore.case = TRUE)
grepl("[0-9]+(JAN)[0-9]{4}", "10jan2015", ignore.case = TRUE)
grepl("[0-9]+(JAN|FEB)[0-9]{4}", "10jan2015", ignore.case = TRUE)
grepl("[0-9]+(JAN|FEB)[0-9]{4}", "10feb2015", ignore.case = TRUE)
grepl("[0-9]+(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|NOV|DEC)[0-9]{4}", "10feb2015", ignore.case = TRUE)
grepl("[0-9]+(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|NOV|DEC)[0-9]{4}", "10aug2015", ignore.case = TRUE)
as.Date("10AUG2015", "%d%b%Y")
getDate <- function(x) {
dt <- NULL
if (grepl("[1-9]+JAN[1-9]{4}", x)) {
dt <- as.Date(x, "%d%b%Y")
}
return (dt)
}
getDate("15JAN2017")
getDate <- function(x) {
dt <- NULL
if (grepl("[0-9]+(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|NOV|DEC)[0-9]{4}", x)) {
dt <- as.Date(x, "%d%b%Y")
}
return (dt)
}
getDate("15JAN2017")
path <- "S:/RhoFED/ICAC2/PROSE/Statistics/Data/Complete/pdr.sas7bdat";
data = read.sas7bdat(path)
library(sas7bdat)
data = read.sas7bdat(path)
colnames(data)
head(data$PDR_q7a1c)
infile <- "C:/RhoVer/Working/test-in.csv"
df <- read.csv(infile)
infile <- "C:/RhoVer/Working/test-in.csv"
fieldname <- "VSGP_q5-358"
threshold <- 2
df <- read.csv(infile)
field <- df[,fieldname]
field <- df[,c(fieldname)]
field <- df[,fieldname]
fieldnum <- 3
field <- df[,fieldnum]
length(field)
fieldMean <- mean(field, na.rm = TRUE)
?mean
head(field)
mean(field)
field <- as.numeric(df[,fieldnum])
fieldMean <- mean(field, na.rm = TRUE)
fieldSd <- sd(field, na.rm = TRUE)
deltas <- abs(field - fieldMean)
deltas
sdCutoff <- 2
cutoff <- fieldSd * sdCutoff
outliers <- deltas > cutoff
outliers
outfile <- "C:/RhoVer/Working/test-out.csv"
?write.csv
write.csv(outliers, file = outfile)
paramfile <- "C:/RhoVer/Working/test-param.csv"
params <- data.frame(mean = c(fieldMean), sd = c(fieldSd))
write.csv(params, paramfile)
df <- read.csv(infile)
field <- as.numeric(df[,fieldnum])
fieldMean <- mean(field, na.rm = TRUE)
deltas <- abs(field - fieldMean)
fieldSd <- sd(field, na.rm = TRUE)
cutoff <- fieldSd * sdCutoff
df$outliers <- deltas > cutoff
write.csv(df, file = outfile)
params <- data.frame(mean = c(fieldMean), sd = c(fieldSd))
write.csv(params, paramfile)
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
fieldnum <- 3
sdCutoff <- 2
df <- read.csv(infile)
field <- as.numeric(df[,fieldnum])
fieldMean <- mean(field, na.rm = TRUE)
deltas <- abs(field - fieldMean)
fieldSd <- sd(field, na.rm = TRUE)
cutoff <- fieldSd * sdCutoff
df$outliers <- deltas > cutoff
write.csv(df, file = outfile)
params <- data.frame(mean = c(fieldMean), sd = c(fieldSd))
write.csv(params, paramfile)
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
fieldnum <- 3
sdCutoff <- 2
df <- read.csv(infile)
field <- as.numeric(df[,fieldnum])
fieldMean <- mean(field, na.rm = TRUE)
deltas <- abs(field - fieldMean)
fieldSd <- sd(field, na.rm = TRUE)
cutoff <- fieldSd * sdCutoff
df$outliers <- deltas > cutoff
write.csv(df, file = outfile, row.names = FALSE)
params <- data.frame(mean = c(fieldMean), sd = c(fieldSd))
write.csv(params, paramfile)
# args <- commandArgs(trailingOnly=TRUE)
# infile <- args[1]
# outfile <- args[2]
# paramfile <- args[3]
# fieldnum <- as.integer(args[4])
# sdCutoff <- as.numeric(args[5])
infile <- "C:/RhoVer/Working/test-in.csv"
outfile <- "C:/RhoVer/Working/test-out.csv"
paramfile <- "C:/RhoVer/Working/test-param.csv"
fieldnum <- 3
sdCutoff <- 2
df <- read.csv(infile)
field <- as.numeric(df[,fieldnum])
fieldMean <- mean(field, na.rm = TRUE)
deltas <- abs(field - fieldMean)
fieldSd <- sd(field, na.rm = TRUE)
cutoff <- fieldSd * sdCutoff
df$outliers <- deltas > cutoff
write.csv(df, file = outfile, row.names = FALSE)
params <- data.frame(mean = c(fieldMean), sd = c(fieldSd))
write.csv(params, paramfile, row.names = FALSE)
library(sas7bdat)
file1 <- "S:/RhoFED/CTOT-SACCC/CTOT/CTOT-08-Abecassis/Stats/Data/Clinical/vitlmstr.sas7bdat"
file2 <- "S:/RhoFED/CTOT-SACCC/CTOT/CTOT-08-Abecassis/Stats/Data/Clinical/chemmstr.sas7bdat"
mergeCol <- "ID"
df1 <- read.sas7bdat(file1)
df2 <- read.sas7bdat(file2)
df3 <- merge(df1, df2, by=mergeCol)
cor(df3)
?cor
