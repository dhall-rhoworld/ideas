res
dbClearResult(rs)
rs <- dbSendQuery(con, "select study_name from study")
res <- fetch(rs)
rs
res <- fetch(rs)
rs
dbClearResult(rs)
rs <- dbSendQuery(con, "select study_name from study")
res <- fetch(rs)
rs
dbClearResult(rs)
rs <- dbSendQuery(con, "select study_name from study;")
res <- fetch(rs)
rs
dbClearResult(rs)
dbClearResult(rs)
rs <- dbSendQuery(con, "select study_name from study;")
res <- dbFetch(rs)
rs
dbClearResult(rs)
rs <- dbSendQuery(con, "select study_name from study;")
dat <- dbFetch(rs)
dat
rs <- dbSendQuery(con, "select study_name from study;")
dat <- dbFetch(rs)
dat
head(data)
query <- paste(
"select ds.dataset_id",
"from dataset ds",
"join study s on s.study_id = ds.study_id",
"where s.study_name = 'PROSE'",
"and ds.dataset_name = 'VSGP'"
)
query
rs <- dbSendQuery(con, query)
dat <- dbFetch(rs)
dat
length(dat)
dat
rs <- dbSendQuery(con, "select study_name from study;")
dat <- dbFetch(rs)
dat
length(dat)
str(dat)
nrow(dat)
rs <- dbSendQuery(con, query)
dat <- dbFetch(rs)
dat
nrow(dat)
query <- paste(
"insert into dataset ds (dataset_name, study_id)",
"values('VSGP', 1)"
)
dbSendQuery(con, query)
query <- paste(
"insert into dataset (dataset_name, study_id)",
"values('VSGP', 1)"
)
dbSendQuery(con, query)
is.numeric(data)
is.numeric(data[,9])
is.numeric(data[,11])
source("outlier_scout.R")
findTrulyNumericVariables(data)
source("outlier_scout.R")
findTrulyNumericVariables(data)
source("outlier_scout.R"); findTrulyNumericVariables(data)
source("outlier_scout.R"); findTrulyNumericVariables(data)
list.files(path = ".")
list.files(path = "S:/RhoFED/ICAC2/PROSE/Statistics/Data/Complete")
list.files(path = "S:/RhoFED/ICAC2/PROSE/Statistics/Data/Complete", pattern = "*.sas7bdat")
source("outlier_scout.R"); findUniveriateOutliersInDataFrame(data)
source("outlier_scout.R"); findUniveriateOutliersInDataFrame(data)
source("outlier_scout.R"); findUniveriateOutliersInDataFrame(data)
source("outlier_scout.R"); findUniveriateOutliersInDataFrame(data)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data)
source("outlier_scout.R");
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data)
head(data)
rs <- dbSendQuery(con, "select study_name from study;")
con <- dbConnect(MySQL(),
user="rhover", password="rhover",
dbname="rhover", host="localhost")
on.exit(dbDisconnect(con))
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", con)
con
rs <- dbSendQuery(con, "select study_name from study;")
dat <- dbFetch(rs)
dat
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROS", "VSGP", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PR", "VSGP", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PR", "VSGP", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PR", "VSGP", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", con)
source("outlier_scout.R"); loadStudyName("PROSE", con)
source("outlier_scout.R"); loadStudyName("PR", con)
source("outlier_scout.R"); loadStudyName("PR", con)
source("outlier_scout.R"); loadStudyName("PR", con)
source("outlier_scout.R"); loadDataset("test", 1, con)
source("outlier_scout.R"); loadDataset("test", 1, con)
source("outlier_scout.R"); loadDataset("test", 1, con)
source("outlier_scout.R"); loadStudyName("PROSE")
source("outlier_scout.R"); loadStudyName("PROSE", con)
source("outlier_scout.R"); loadDataset("test", 8, con)
source("outlier_scout.R"); loadDataset("test", 8, con)
source("outlier_scout.R"); loadDataset("test", 8, con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", con)
file.info(path)
source("outlier_scout.R"); loadDatasetVersion("03:35:56 2015-07-21", 6, con)
source("outlier_scout.R"); loadDatasetVersion("03:35:56 2015-07-21", 6, con)
source("outlier_scout.R"); loadDatasetVersion("03:35:56 2015-07-21", 6, con)
source("outlier_scout.R"); loadDatasetVersion("03:35:56 2015-07-21", 6, con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
head(data$visit)
head(data$Visit)
head(data$event)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
?paste
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
?vector
?list
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
rs <- dbSendQuery(con, "select study_name from study;")
dat <- dbFetch(rs)
dat
source("outlier_scout.R"); findAndLoadUnivariateOutliers(data, "PROSE", "VSGP", "03:35:56 2015-07-21", con)
for (file in files) {
print(file)
}
library(sas7bdat)
clinical.dir = "S:/RhoFED/ICAC2/PROSE/Statistics/Data/Complete"
output.dir = "C:/RhoVer"
# Get list of SAS data files
files = list.files(clinical.dir, patten = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
print(file)
}
library(sas7bdat)
clinical.dir = "S:/RhoFED/ICAC2/PROSE/Statistics/Data/Complete"
output.dir = "C:/RhoVer"
# Get list of SAS data files
files = list.files(clinical.dir, patten = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
print(file)
}
files = list.files(clinical.dir, patten = "*.sas7bdat")
library(sas7bdat)
clinical.dir = "S:/RhoFED/ICAC2/PROSE/Statistics/Data/Complete"
output.dir = "C:/RhoVer"
# Get list of SAS data files
files = list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
print(file)
}
library(sas7bdat)
clinical.dir = "S:/RhoFED/ICAC2/PROSE/Statistics/Data/Complete"
output.dir = "C:/RhoVer"
# Get list of SAS data files
files = list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path = paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", file)
}
library(sas7bdat)
clinical.dir = "S:/RhoFED/ICAC2/PROSE/Statistics/Data/Complete"
output.dir = "C:/RhoVer"
# Get list of SAS data files
files = list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path = paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
}
files = list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path = paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
file.info(path)
}
file.info("S:/RhoFED/ICAC2/PROSE/Statistics/Data/Complete/vsgp.sas7bdat")
for (file in files) {
path = paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name = file.info(path)$mtime
message(version.name)
}
study = "PROSE"
files <- list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Extract dataset name
dataset.name <- data[1, "form_name"]
message(dataset.name)
break;
}
source("outlier_scout.R")
library(RMySQL)
con <- dbConnect(MySQL(),
user="rhover", password="rhover",
dbname="rhover", host="localhost")
?write.csv
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Extract dataset name
dataset.name <- data[1, "form_name"]
# Find and load outliers
findAndLoadUnivariateOutliers(data, study, dataset.name, version.name, con)
# Write data to CSV file
out.path <- paste(output.dir, "/", dataset.name, ".csv")
write.csv(data, file = out.path)
break;
}
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Extract dataset name
dataset.name <- data[1, "form_name"]
# Find and load outliers
findAndLoadUnivariateOutliers(data, study, dataset.name, version.name, con)
# Write data to CSV file
out.path <- paste(output.dir, "/", dataset.name, ".csv", sep = "")
write.csv(data, file = out.path)
break;
}
str(data$AAH_q18d)
unique(data$AAH_q18d)
length(unique(data$AAH_q14d))
files <- list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Extract dataset name
dataset.name <- data[1, "form_name"]
# Find and load outliers
findAndLoadUnivariateOutliers(data, study, dataset.name, version.name, con)
# Write data to CSV file
out.path <- paste(output.dir, "/", dataset.name, ".csv", sep = "")
write.csv(data, file = out.path)
break;
}
source("outlier_scout.R")
con <- dbConnect(MySQL(),
user="rhover", password="rhover",
dbname="rhover", host="localhost")
# Get list of SAS data files
files <- list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Extract dataset name
dataset.name <- data[1, "form_name"]
# Find and load outliers
findAndLoadUnivariateOutliers(data, study, dataset.name, version.name, con)
# Write data to CSV file
out.path <- paste(output.dir, "/", dataset.name, ".csv", sep = "")
write.csv(data, file = out.path)
break;
}
files <- list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Extract dataset name
dataset.name <- data[1, "form_name"]
# Find and load outliers
findAndLoadUnivariateOutliers(data, study, dataset.name, version.name, con)
# Write data to CSV file
out.path <- paste(output.dir, "/", dataset.name, ".csv", sep = "")
write.csv(data, file = out.path)
}
files <- list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Extract dataset name
dataset.name <- data[1, "form_name"]
# Find and load outliers
findAndLoadUnivariateOutliers(data, study, dataset.name, version.name, con)
# Write data to CSV file
out.path <- paste(output.dir, "/", dataset.name, ".csv", sep = "")
write.csv(data, file = out.path)
}
# Get list of SAS data files
files <- list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Extract dataset name
dataset.name <- data[1, "form_name"]
# Find and load outliers
findAndLoadUnivariateOutliers(data, study, dataset.name, version.name, con)
# Write data to CSV file
out.path <- paste(output.dir, "/", dataset.name, ".csv", sep = "")
write.csv(data, file = out.path)
}
source("outlier_scout.R")
files <- list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Extract dataset name
dataset.name <- data[1, "form_name"]
# Find and load outliers
findAndLoadUnivariateOutliers(data, study, dataset.name, version.name, con)
# Write data to CSV file
out.path <- paste(output.dir, "/", dataset.name, ".csv", sep = "")
write.csv(data, file = out.path)
}
files <- list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Replace variable names with labels
attrs = attr(data, "column.info")
num.labels = length(attrs)
labels = vector(length = num.labels)
for (i in 1:num.labels) {
if (is.null(attrs[[i]]$label)) {
labels[i] = attrs[[i]]$name
}
else {
labels[i] = attrs[[i]]$label
}
}
colnames(data) = gsub(" ", "_", labels)
# Extract dataset name
dataset.name <- data[1, "form_name"]
# Find and load outliers
findAndLoadUnivariateOutliers(data, study, dataset.name, version.name, con)
# Write data to CSV file
out.path <- paste(output.dir, "/", dataset.name, ".csv", sep = "")
write.csv(data, file = out.path)
}
files <- list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Replace variable names with labels
attrs = attr(data, "column.info")
num.labels = length(attrs)
labels = vector(length = num.labels)
for (i in 1:num.labels) {
if (is.null(attrs[[i]]$label)) {
labels[i] = attrs[[i]]$name
}
else {
labels[i] = attrs[[i]]$label
}
}
colnames(data) = gsub(" ", "_", labels)
# Extract dataset name
dataset.name <- data[1, "form_name"]
# Find and load outliers
findAndLoadUnivariateOutliers(data, study, dataset.name, version.name, con)
# Write data to CSV file
out.path <- paste(output.dir, "/", dataset.name, ".csv", sep = "")
write.csv(data, file = out.path)
}
files <- list.files(clinical.dir, pattern = "*.sas7bdat")
# Run univariate checks in each file
for (file in files) {
path <- paste(clinical.dir, "/", file, sep = "")
message("Processing file: ", path)
# Get file timestamp to use as version name
version.name <- file.info(path)$mtime
# Read file into dataframe
data <- read.sas7bdat(path)
# Replace variable names with labels
attrs = attr(data, "column.info")
num.labels = length(attrs)
labels = vector(length = num.labels)
for (i in 1:num.labels) {
if (is.null(attrs[[i]]$label)) {
labels[i] = attrs[[i]]$name
}
else {
labels[i] = attrs[[i]]$label
}
}
colnames(data) = gsub(" ", "_", labels)
# Extract dataset name
dataset.name <- data[1, "form_name"]
# Find and load outliers
findAndLoadUnivariateOutliers(data, study, dataset.name, version.name, con)
# Write data to CSV file
out.path <- paste(output.dir, "/", dataset.name, ".csv", sep = "")
write.csv(data, file = out.path)
}
path = "S:/RhoFED/ICAC2/PROSE/Statistics/Data/Complete/vsgp.sas7bdat"
data = read.sas7bdat(path)
# Replace variable names with labels
attrs = attr(data, "column.info")
num.labels = length(attrs)
labels = vector(length = num.labels)
for (i in 1:num.labels) {
if (is.null(attrs[[i]]$label)) {
labels[i] = attrs[[i]]$name
}
else {
labels[i] = attrs[[i]]$label
}
}
colnames(data) = gsub(" ", "_", labels)
colnames(data)
head(data)
data <- data[,!c("Visit_Date", "Participant's_Initials")]
data <- data[,!c("Visit_Date", "Participant's_Initials"), with = FALSE]
data <- within(data, rm("Visit_Date"))
head(data)
data <- within(data, rm("Participant's_Initials"))
head(data)
length(data$RecruitID)
?sequence
?seq
seq(length.out = 5)
data$RecruitID = seq(length.out = 7867)
head(data)
?write.csv
write.csv(data, file="C:/Temp/anonymized_data.csv")
