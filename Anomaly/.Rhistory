sep=""
)
result <- dbGetQuery(con, sql)
if (nrow(result) > 0) {
v[i] = result[1, 1]
}
else {
v[i] = -1
}
}
return (v)
}
globalStudyChecksInstances <- fetchStudyChecksInstancesUsingGlobalParametersId(con, globalParamVersions)
globalStudyChecksInstances
fetchStudyChecksInstancesUsingStudyParametersId <- function(con, studyParametersVersionIds) {
# Fetch study check instances associated with given study parameters version IDs
#
# Args:
#     con : Database connection
#     studyParameterVersionIds Vector of study parameter version IDs
#
# Return:
#     Vector of study check instance IDs
numIds <- length(studyParametersVersionIds)
v <- integer(length = numIds)
for (i in 1:numIds) {
sql <- paste(
"select study_checks_instance_id, global_parameters_version_id, study_parameters_version_id ",
"from study_checks_instance ",
"where study_parameters_version_id = ", studyParametersVersionIds[i],
sep=""
)
result <- dbGetQuery(con, sql)
if (nrow(result) > 0) {
v[i] = result[1, 1]
}
else {
v[i] = -1
}
}
return (v)
}
localStudyChecksInstances <- fetchStudyChecksInstancesUsingStudyParametersId(con, studyParamVersions)
localStudyChecksInstances
con <- openDbConnection("rhover", "rhover", "rhover", "localhost")
dataCheckerRunId <- loadDataCheckerRun(con)
loadDataCheckerRun <- function(con) {
sql <- "insert into data_checker_run() values()";
dbSendQuery(con, sql)
return (dbGetQuery(con, "select last_insert_id()")[1, 1])
}
dataCheckerRunId <- loadDataCheckerRun(con)
dataCheckerRunId
source("rhover_logger.R")
source("rhover_logger.R")
initializeLogging(con, dataCheckerRunId)
logInfo("Logging system initialized")
source("rhover_logger.R")
logInfo("Logging system initialized")
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
fullMessage <- paste(messageTypeNames[Code = messageType, 2], ": ", message, sep="");
message(fullMessage);
}
logInfo("Logging system initialized")
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
fullMessage <- paste(messageTypeNames[MessageTypeNames$Code = messageType, 2], ": ", message, sep="");
message(fullMessage);
}
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
fullMessage <- paste(messageTypeNames[MessageTypeNames$Code = messageType, 2], ": ", message, sep="");
message(fullMessage);
}
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
fullMessage <- paste(messageTypeNames[messageTypeNames$Code = messageType, 2], ": ", message, sep="");
message(fullMessage);
}
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
fullMessage <- paste(messageTypeNames[messageTypeNames$Code = messageType, 2], ": ", message, sep="");
message(fullMessage);
}
fullMessage <- paste(messageTypeNames[messageTypeNames$Code = messageType, 2], ": ", message, sep="");
name <- messageTypeNames[Code = messageType, 2]
?data.frame
messageTypeNames <- data.frame(row.names = 1, Code = c("F", "E", "W", "I"), Name = c("FATAL", "ERROR", "WARNING", "INFO"))
name <- messageTypeNames[messageType, 2]
name <- messageTypeNames["I", 2]
name
A = data.frame(c1 = ("a", "b", "c"), c2 = ("1", "2", "3"), row.names=c1)
A = data.frame(c1 = c("a", "b", "c"), c2 = c("1", "2", "3"), row.names=c1)
A = data.frame(c1 = c("a", "b", "c"), c2 = c("1", "2", "3"), row.names="c1")
A
messageTypeNames <- data.frame(Code = c("F", "E", "W", "I"), Name = c("FATAL", "ERROR", "WARNING", "INFO"),
row.names="Code")
con <- openDbConnection("rhover", "rhover", "rhover", "localhost")
dataCheckerRunId <- loadDataCheckerRun(con)
initializeLogging(con, dataCheckerRunId)
logInfo("Logging system initialized")
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
name <- messageTypeNames["I", 2]
fullMessage <- paste(messageTypeNames[messageType, 2], ": ", message, sep="");
message(fullMessage);
}
logInfo("Logging system initialized")
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
name <- messageTypeNames["I", 2]
fullMessage <- paste(name, ": ", message, sep="");
message(fullMessage);
}
logInfo("Logging system initialized")
A
A[a, 1]
A["a", 1]
A
A[a,]
A["a",]
str(A)
rownames(A)
messageTypeNames <- data.frame(Code = c("F", "E", "W", "I"), Name = c("FATAL", "ERROR", "WARNING", "INFO"))
A
A$c2
A[a,]
A[1,]
A[1,1]
str(A)
A$c2
A["a",]
messageTypeNames <- data.frame(Code = c("F", "E", "W", "I"), Name = c("FATAL", "ERROR", "WARNING", "INFO"),
row.names = "Code")
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
name <- messageTypeNames["I", 1]
fullMessage <- paste(name, ": ", message, sep="");
message(fullMessage);
}
logInfo("Logging system initialized")
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
name <- messageTypeNames[messageType, 1]
fullMessage <- paste(name, ": ", message, sep="");
message(fullMessage);
}
logInfo("Logging system initialized")
logWarning("Logging system initialized")
insertLogMessage <- function(con, messageType, message, dataCheckerRunId) {
sql <- paste(
"insert into data_checker_message(message_type, message, data_checker_run_id) ",
"values('", messageType, "', '", message, "', ", dataCheckerRunId, ")",
sep = ""
)
dbSendQuery(sql)
}
logMessage <- function(messageType, message) {
# Log a message to the console, database, and log file
#
# Args:
#     messageType: A single character code as follows:
#          'F' = Fatal
#          'E' = Error
#          'W' = Warning
#          'I' = Information
#     message : Message to log
name <- messageTypeNames[messageType, 1]
fullMessage <- paste(name, ": ", message, sep="");
message(fullMessage);
insertLogMessage(l_con, messageType, message, l_dataCheckerRunId)
}
logInfo("Logging system initialized")
insertLogMessage <- function(con, messageType, message, dataCheckerRunId) {
sql <- paste(
"insert into data_checker_message(message_type, message, data_checker_run_id) ",
"values('", messageType, "', '", message, "', ", dataCheckerRunId, ")",
sep = ""
)
dbSendQuery(con, sql)
}
logInfo("Logging system initialized")
insertLogMessage <- function(con, messageType, message, dataCheckerRunId) {
sql <- paste(
"insert into data_checker_message(message_type, message, data_checker_run_id) ",
"values('", messageType, "', '", message, "', ", dataCheckerRunId, ")",
sep = ""
)
message(sql)
dbSendQuery(con, sql)
}
logInfo("Logging system initialized")
initializeLogging(con, dataCheckerRunId)
logInfo("Logging system initialized")
dataCheckerRunId
l_dataCheckerRunId
initializeLogging <- function(con, dataCheckerRunId) {
# Initialize logging system
#
# Args:
#    con : Database connection
#    dataCheckerRunId: ID of data checker run
l_con <- con
l_dataCheckerRunId <- dataCheckerRunId
message(l_dataCheckerRunId)
}
initializeLogging(con, dataCheckerRunId)
l_dataCheckerRunId
l_dataCheckerRunId <- -1
initializeLogging(con, dataCheckerRunId)
?assign
initializeLogging <- function(con, dataCheckerRunId) {
# Initialize logging system
#
# Args:
#    con : Database connection
#    dataCheckerRunId: ID of data checker run
assign(l_con, con)
assign(l_dataCheckerRunId, dataCheckerRunId)
}
initializeLogging(con, dataCheckerRunId)
initializeLogging <- function(con, dataCheckerRunId) {
# Initialize logging system
#
# Args:
#    con : Database connection
#    dataCheckerRunId: ID of data checker run
assign("l_con", con)
assign("l_dataCheckerRunId", dataCheckerRunId)
}
initializeLogging(con, dataCheckerRunId)
logInfo("Logging system initialized")
l_dataCheckerRunId
l_con <<- NULL
l_dataCheckerRunId <<- -1
initializeLogging <- function(con, dataCheckerRunId) {
# Initialize logging system
#
# Args:
#    con : Database connection
#    dataCheckerRunId: ID of data checker run
l_con <<- con
l_dataCheckerRunId <<- dataCheckerRunId
}
initializeLogging(con, dataCheckerRunId)
l_dataCheckerRunId
logInfo("Logging system initialized")
insertLogMessage <- function(con, messageType, message, dataCheckerRunId) {
sql <- paste(
"insert into data_checker_message(message_type, message, data_checker_run_id) ",
"values('", messageType, "', '", message, "', ", dataCheckerRunId, ")",
sep = ""
)
dbSendQuery(con, sql)
}
dbResult <- logInfo("Logging system initialized")
insertLogMessage <- function(con, messageType, message, dataCheckerRunId) {
# Insert a log message into the database
#
# Args:
#     con : Database connection
#     messageType: Message type code.  See rhover_logger.R for allowed values.
#     message : Message to log
#     dataCheckerRunId : ID of data checker run
sql <- paste(
"insert into data_checker_message(message_type, message, data_checker_run_id) ",
"values('", messageType, "', '", message, "', ", dataCheckerRunId, ")",
sep = ""
)
return (dbSendQuery(con, sql))
}
dbResult <- logInfo("Logging system initialized")
dataCheckerRunId <- loadDataCheckerRun(con)
initializeLogging(con, dataCheckerRunId)
dbResult <- logInfo("Logging system initialized")
runUnivariateChecks(con)
runUnivariateChecks(con)
runUnivariateChecksOnStudy <- function(con, checksDf, studyDf) {
# Run all univariate checks on a study
#
# Args:
#     con : Database connection
#     checksDf : Data frame containing checks to run
#     studyDf : Data frame containing study to run
studyName <- studyDf[1, 2]
message("Processing study ", studyName)
# Fetch study folders
studyId <- studyDf[1, 1]
studyFoldersDf <- fetchAllStudyFolders(con, studyId)
numFolders <- nrow(studyFoldersDf)
if (numFolders == 0) {
logWarning("No data folders")
return (0)
}
# Process each study folder
for (i in 1:numFolders) {
runUnivariateChecksOnStudyFolder(con, checksDf, studyFoldersDf[i,])
}
return (0)
}
runUnivariateChecks <- function(con) {
# Runs all univatate checks against all studies
#
# Args:
#     con : Database connection
# Fetch univariate data checks
checksDf <- fetchAllUnivariateDataChecks(con)
if (nrow(checks) == 0) {
logWarning("No univariate checks defined")
return (0)
}
# Fetch studies
studiesDf <- fetchAllStudies(con)
numStudies <- nrow(studiesDf)
if (numStudies == 0) {
logWarning("No studies")
return (0)
}
# Process each study
for (i in 1:numStudies) {
runUnivariateChecksOnStudy(con, checksDf, studyDf[i,])
}
return (0)
}
runUnivariateChecks(con)
runUnivariateChecks(con)
runUnivariateChecks <- function(con) {
# Runs all univatate checks against all studies
#
# Args:
#     con : Database connection
# Fetch univariate data checks
checksDf <- fetchAllUnivariateDataChecks(con)
if (nrow(checks) == 0) {
logWarning("No univariate checks defined")
return (0)
}
# Fetch studies
studiesDf <- fetchAllStudies(con)
numStudies <- nrow(studiesDf)
if (numStudies == 0) {
logWarning("No studies")
return (0)
}
# Process each study
for (i in 1:numStudies) {
runUnivariateChecksOnStudy(con, checksDf, studiesDf[i,])
}
return (0)
}
runUnivariateChecks(con)
runUnivariateChecksOnStudy <- function(con, checksDf, studyDf) {
# Run all univariate checks on a study
#
# Args:
#     con : Database connection
#     checksDf : Data frame containing checks to run
#     studyDf : Data frame containing study to run
studyName <- studyDf[1, 2]
logInfo("Processing study ", studyName)
# Fetch study folders
studyId <- studyDf[1, 1]
studyFoldersDf <- fetchAllStudyFolders(con, studyId)
numFolders <- nrow(studyFoldersDf)
if (numFolders == 0) {
logWarning("No data folders")
return (0)
}
# Process each study folder
for (i in 1:numFolders) {
runUnivariateChecksOnStudyFolder(con, checksDf, studyFoldersDf[i,])
}
return (0)
}
runUnivariateChecks(con)
runUnivariateChecksOnStudy <- function(con, checksDf, studyDf) {
# Run all univariate checks on a study
#
# Args:
#     con : Database connection
#     checksDf : Data frame containing checks to run
#     studyDf : Data frame containing study to run
studyName <- studyDf[1, 2]
logInfo(paste("Processing study", studyName))
# Fetch study folders
studyId <- studyDf[1, 1]
studyFoldersDf <- fetchAllStudyFolders(con, studyId)
numFolders <- nrow(studyFoldersDf)
if (numFolders == 0) {
logWarning("No data folders")
return (0)
}
# Process each study folder
for (i in 1:numFolders) {
runUnivariateChecksOnStudyFolder(con, checksDf, studyFoldersDf[i,])
}
return (0)
}
runUnivariateChecks(con)
runUnivariateChecksOnFile <- function(con, checksDf, filePath) {
logInfo(paste("Processing file", filePath))
return (0)
}
runUnivariateChecksOnStudyFolder <- function(con, checksDf, studyFolderDf) {
path <- studyFolderDf[1, 2]
logInfo(paste("Processing folder", path))
# Fetch paths of all SAS data files
sasFiles <- getAllSasFilePaths(path)
# Process each SAS data file
for (dataFile in sasFiles) {
runUnivariateChecksOnFile(con, checksDf, dataFile)
}
return (0)
}
runUnivariateChecksOnStudy <- function(con, checksDf, studyDf) {
# Run all univariate checks on a study
#
# Args:
#     con : Database connection
#     checksDf : Data frame containing checks to run
#     studyDf : Data frame containing study to run
studyName <- studyDf[1, 2]
logInfo(paste("Processing study", studyName))
# Fetch study folders
studyId <- studyDf[1, 1]
studyFoldersDf <- fetchAllStudyFolders(con, studyId)
numFolders <- nrow(studyFoldersDf)
if (numFolders == 0) {
logWarning("No data folders")
return (0)
}
# Process each study folder
for (i in 1:numFolders) {
runUnivariateChecksOnStudyFolder(con, checksDf, studyFoldersDf[i,])
}
return (0)
}
runUnivariateChecks(con)
dbDisconnect(con)
